{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\speechproject\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './App.css';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport useClipboard from \"react-use-clipboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isCopied, setCopied] = useClipboard(\"Text to copy\");\n  const strtListen = () => SpeechRecognition.startListening({\n    continuous: true,\n    language: 'en-IN'\n  });\n  const {\n    transcript,\n    listening,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  if (!browserSupportsSpeechRecognition) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Browser doesn't support speech recognition.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Speech To Text Conerter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Converts speech from the microphone to text and makes it available to your React components.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-style\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setCopied,\n          children: [\"Was it copied? \", isCopied ? \"Yes! üëç\" : \"Nope! üëé\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: strtListen,\n          children: \"Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: SpeechRecognition.stopListening,\n          children: \"stop Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 6\n    }, this)\n  }, void 0, false);\n};\n_s(App, \"6L/82/eMKZ2lKmf31aFerD1MPxI=\", false, function () {\n  return [useClipboard, useSpeechRecognition];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","SpeechRecognition","useSpeechRecognition","useClipboard","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isCopied","setCopied","strtListen","startListening","continuous","language","transcript","listening","browserSupportsSpeechRecognition","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","stopListening","_c","$RefreshReg$"],"sources":["D:/React/speechproject/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport useClipboard from \"react-use-clipboard\";\n\nconst App=()=>{\n\n  const [isCopied, setCopied] = useClipboard(\"Text to copy\");\n  const strtListen=()=> SpeechRecognition.startListening({ continuous: true , language :'en-IN' })\n  const {transcript,listening,browserSupportsSpeechRecognition} = useSpeechRecognition();\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>Browser doesn't support speech recognition.</span>;\n  }\n\n  return(<>\n     <div className='container'>\n      <h2>Speech To Text Conerter</h2>\n      <br/>\n      <p>Converts speech from the microphone to text and makes it\navailable to your React components.</p>\n      <div className='main-content'>\n             {transcript}\n      </div>\n\n      <div className='btn-style'>\n      <button onClick={setCopied}>\n      Was it copied? {isCopied ? \"Yes! üëç\" : \"Nope! üëé\"}\n    </button>\n        <button onClick={strtListen}>Listening</button>\n        <button onClick={SpeechRecognition.stopListening}>stop Listening</button>\n      </div>\n     </div>\n  </>)\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAClB,OAAOC,iBAAiB,IAAIC,oBAAoB,QAAQ,0BAA0B;AAClF,OAAOC,YAAY,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/C,MAAMC,GAAG,GAACA,CAAA,KAAI;EAAAC,EAAA;EAEZ,MAAM,CAACC,QAAQ,EAAEC,SAAS,CAAC,GAAGR,YAAY,CAAC,cAAc,CAAC;EAC1D,MAAMS,UAAU,GAACA,CAAA,KAAKX,iBAAiB,CAACY,cAAc,CAAC;IAAEC,UAAU,EAAE,IAAI;IAAGC,QAAQ,EAAE;EAAQ,CAAC,CAAC;EAChG,MAAM;IAACC,UAAU;IAACC,SAAS;IAACC;EAAgC,CAAC,GAAGhB,oBAAoB,CAAC,CAAC;EAEtF,IAAI,CAACgB,gCAAgC,EAAE;IACrC,oBAAOb,OAAA;MAAAc,QAAA,EAAM;IAA2C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EACjE;EAEA,oBAAOlB,OAAA,CAAAE,SAAA;IAAAY,QAAA,eACJd,OAAA;MAAKmB,SAAS,EAAC,WAAW;MAAAL,QAAA,gBACzBd,OAAA;QAAAc,QAAA,EAAI;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChClB,OAAA;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACLlB,OAAA;QAAAc,QAAA,EAAG;MAC0B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACjClB,OAAA;QAAKmB,SAAS,EAAC,cAAc;QAAAL,QAAA,EACrBH;MAAU;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC,eAENlB,OAAA;QAAKmB,SAAS,EAAC,WAAW;QAAAL,QAAA,gBAC1Bd,OAAA;UAAQoB,OAAO,EAAEd,SAAU;UAAAQ,QAAA,GAAC,iBACb,EAACT,QAAQ,GAAG,SAAS,GAAG,UAAU;QAAA;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CAAC,eACLlB,OAAA;UAAQoB,OAAO,EAAEb,UAAW;UAAAO,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC/ClB,OAAA;UAAQoB,OAAO,EAAExB,iBAAiB,CAACyB,aAAc;UAAAP,QAAA,EAAC;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC,gBACP,CAAC;AACL,CAAC;AAAAd,EAAA,CA7BKD,GAAG;EAAA,QAEuBL,YAAY,EAEsBD,oBAAoB;AAAA;AAAAyB,EAAA,GAJhFnB,GAAG;AA+BT,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}