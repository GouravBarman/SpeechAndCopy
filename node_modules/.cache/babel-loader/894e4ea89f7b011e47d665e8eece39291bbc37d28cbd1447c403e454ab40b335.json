{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\speechproject\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport \"./App.css\";\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport useClipboard from \"react-use-clipboard\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [current, updated] = useState();\n  const [isCopied, setCopied] = useClipboard(current, {\n    successDuration: 1000\n  });\n  const startListening = () => SpeechRecognition.startListening({\n    continuous: true,\n    language: 'en-IN'\n  });\n  const {\n    transcript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"u\", {\n          children: \" :sm Speech to Text Converter \\uD83D\\uDE04\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" converts speech from the microphone to text \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        onClick: () => updated(transcript),\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-style\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setCopied,\n          children: isCopied ? 'Copied! ðŸ˜„' : 'Copy to clipboard'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startListening,\n          children: \"Start Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: SpeechRecognition.stopListening,\n          children: \"Stop Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(App, \"FRPzdpa6ua+EL23M8A8EBW0BEEQ=\", false, function () {\n  return [useClipboard, useSpeechRecognition];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","SpeechRecognition","useSpeechRecognition","useClipboard","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","current","updated","isCopied","setCopied","successDuration","startListening","continuous","language","transcript","browserSupportsSpeechRecognition","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","stopListening","_c","$RefreshReg$"],"sources":["D:/React/speechproject/src/App.js"],"sourcesContent":["import React from 'react';\nimport \"./App.css\"\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport useClipboard from \"react-use-clipboard\";\nimport {useState} from \"react\";\n\n\nconst App = () => {\n\n    const [current, updated] = useState();\n    const [isCopied, setCopied] = useClipboard(current, {successDuration:1000 });\n\n    const startListening = () => SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\n    const { transcript, browserSupportsSpeechRecognition } = useSpeechRecognition();\n\n    if (!browserSupportsSpeechRecognition) {\n        return null\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <h2> <u> :sm Speech to Text Converter ðŸ˜„</u></h2>\n                <br/>\n                <p> converts speech from the microphone to text </p>\n\n                <div className=\"main-content\" onClick={() =>  updated(transcript)}>\n                    {transcript}\n                </div>\n\n                <div className=\"btn-style\">\n\n                    <button onClick={setCopied}>\n                        {isCopied ? 'Copied! ðŸ˜„' : 'Copy to clipboard'}\n                    </button>\n                    <button onClick={startListening}>Start Listening</button>\n                    <button onClick={SpeechRecognition.stopListening}>Stop Listening</button>\n\n                </div>\n\n            </div>\n\n        </>\n    );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAClB,OAAOC,iBAAiB,IAAIC,oBAAoB,QAAQ,0BAA0B;AAClF,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,SAAQC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAG/B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEd,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,CAAC;EACrC,MAAM,CAACS,QAAQ,EAAEC,SAAS,CAAC,GAAGX,YAAY,CAACQ,OAAO,EAAE;IAACI,eAAe,EAAC;EAAK,CAAC,CAAC;EAE5E,MAAMC,cAAc,GAAGA,CAAA,KAAMf,iBAAiB,CAACe,cAAc,CAAC;IAAEC,UAAU,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAQ,CAAC,CAAC;EACtG,MAAM;IAAEC,UAAU;IAAEC;EAAiC,CAAC,GAAGlB,oBAAoB,CAAC,CAAC;EAE/E,IAAI,CAACkB,gCAAgC,EAAE;IACnC,OAAO,IAAI;EACf;EAEA,oBACId,OAAA,CAAAE,SAAA;IAAAa,QAAA,eACIf,OAAA;MAAKgB,SAAS,EAAC,WAAW;MAAAD,QAAA,gBACtBf,OAAA;QAAAe,QAAA,GAAI,GAAC,eAAAf,OAAA;UAAAe,QAAA,EAAG;QAAgC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjDpB,OAAA;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACLpB,OAAA;QAAAe,QAAA,EAAG;MAA6C;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAEpDpB,OAAA;QAAKgB,SAAS,EAAC,cAAc;QAACK,OAAO,EAAEA,CAAA,KAAOf,OAAO,CAACO,UAAU,CAAE;QAAAE,QAAA,EAC7DF;MAAU;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eAENpB,OAAA;QAAKgB,SAAS,EAAC,WAAW;QAAAD,QAAA,gBAEtBf,OAAA;UAAQqB,OAAO,EAAEb,SAAU;UAAAO,QAAA,EACtBR,QAAQ,GAAG,YAAY,GAAG;QAAmB;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1C,CAAC,eACTpB,OAAA;UAAQqB,OAAO,EAAEX,cAAe;UAAAK,QAAA,EAAC;QAAe;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACzDpB,OAAA;UAAQqB,OAAO,EAAE1B,iBAAiB,CAAC2B,aAAc;UAAAP,QAAA,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAExE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEL;EAAC,gBAER,CAAC;AAEX,CAAC;AAAChB,EAAA,CArCID,GAAG;EAAA,QAGyBN,YAAY,EAGeD,oBAAoB;AAAA;AAAA2B,EAAA,GAN3EpB,GAAG;AAuCT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}